class WebSummit
types

values

instance variables

	private conferences : set of Conference := {};
	private exibit : Exibit := new Exibit();
	private attendees : set of Attendee := {};
	
	private initialDate : Utils`Date := mk_Utils`Date(2001,1,1);
	private finalDate : Utils`Date := mk_Utils`Date(2001,1,2);
	
	private static websummit: WebSummit := new WebSummit();
	
operations

	-- constructor of the websummit class 
		public WebSummit :  () ==> WebSummit
	  	WebSummit () == (
	  		return self
	  	);
	  	
	-- singleton - return the existent instance
		public pure static getInstance: () ==> WebSummit 
			getInstance() == return websummit;
	  	
	-- singleton - reset the instance
	public static clearInstance: () ==> WebSummit
		clearInstance() == (
			websummit := new WebSummit();
			return getInstance();
		)
		post RESULT.conferences = {} and RESULT.exibit.GetStartups() = {}
			 and RESULT.exibit.GetInvestors() = {} and RESULT.attendees = {};
	  	
	 -- sets websummit dates
	 public SetDates : Utils`Date * Utils`Date ==> ()
	  	SetDates (d1, d2) == (
	  		initialDate := d1;
	  		finalDate := d2;
	  	);
	  	
	 --  returns websummit initial date
	 pure public GetInitialDate : () ==> Utils`Date
	  	GetInitialDate () == (
	  		return initialDate
	  	);
	  	
	  -- returns websummit final date
	 pure public GetFinalDate : () ==> Utils`Date
	  	GetFinalDate () == (
	  		return finalDate
	  	);
			
			
	 -- creates a new conferece
	 public AddConference : Conference ==> ()
	  	AddConference (conference) == (
	  		conferences := conferences union {conference};
	  	)
	  	pre conference not in set conferences and notAlreadyExistent(conference) = true
			post conferences = conferences~ union {conference};
			
	-- adds a new talk to an existing conference
	 public AddTalk : Conference * Talk ==> ()
	  	AddTalk (conference, talk) == (
	  		conference.AddTalk(talk);
	  	)
	  	pre conference in set conferences and
	  			Utils`isSetBetweenDates(talk.GetDate(), initialDate, finalDate);
	  	
	 -- returns all confereces
	 public GetConferences : () ==> set of Conference
	  	GetConferences () == (
	  		return conferences
	  	);
	  	
	 -- returns a specific conferece by it's name
	 public pure GetConference : Utils`String ==> set of Conference
	  	GetConference (conferenceName) == (
	  		dcl result: set of Conference := {};
	  		
	  		for all conference in set conferences do (
	  			if conference.GetName() = conferenceName
	  			then result := result union {conference};
	  		);
	  		
	  		return result
	  	)
		pre len conferenceName > 0
		post RESULT = {} or card RESULT = 1;
		
		
		-- returns the full schedule of a conference
	 public GetSchedule : Conference ==> map Utils`Date to seq of Talk
	  	GetSchedule (c) == (
	  		return c.GetSchedule();
	  	)
	  	pre c in set conferences;
	  	
	 -- returns the daily schedule of a conference
	 public GetSchedule : Conference * Utils`Date ==> seq of Talk
	  	GetSchedule (c, d) == (
	  		return c.GetSchedule(d);
	  	)
	  	pre c in set conferences;
	  	
	 -- returns the full event schedule
	 -- NOTA: TODO
	 public GetSchedule : () ==> ()
	  	GetSchedule () == (
	  		return;
	  	);
		
		-- checks if a conference with the same name doesn't exist already: for precondition of AddConference
	   pure private notAlreadyExistent : Conference ==> bool
	  	notAlreadyExistent (newConference) == (
	  	dcl doesntExist : bool := true;
	  	for all conference in set conferences do (
	  		if(conference.GetName() = newConference.GetName())
			  then(
			  			doesntExist := false;
			  			return doesntExist
			  		)
	  		);
	  		
	  		return doesntExist;
	  	)
	  	pre newConference not in set conferences;
	  	
	  	-- NOTA: tem de ter metodo para ir buscar attendee por id para poder removê-los e outro para listar os attendees e speakers
functions

traces

end WebSummit