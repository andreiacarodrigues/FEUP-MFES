class Talk
types

values

instance variables

	private name : Utils`String := [];
	private description : Utils`String := [];
	private date : Utils`Date;
	private time : Utils`Time;
	private duration : nat1;
	private conference : Utils`String := [];
	private speakers : set of Influential := {};
	private attendees : set of Attendee := {};
	
	inv not exists s1, s2 in set speakers & s1 <> s2 and s1.GetID() = s2.GetID();
	inv not exists a1, a2 in set attendees & a1 <> a2 and a1.GetID() = a2.GetID();
	
operations

	-- constructor of the talk class 
		public Talk :  Utils`String *  Utils`String *  Utils`Date *  Utils`Time * nat1 ==> Talk
	  	Talk (talkName, talkDescription, talkDate, talkTime, talkDuration) == (
	  		name := talkName;
	  		description := talkDescription;
	  		date := talkDate;
	  		time := talkTime;
	  		duration := talkDuration;
	  		return self
	  	)
	  	pre len talkName > 0 and talkDuration > 0;
	  	
	 -- returns the talk's name
	 pure public GetName : () ==> Utils`String
	  	GetName () == (
	  		return name;
	  	);
	  	
	 -- set the talk name
	 public SetName : Utils`String ==> ()
	  	SetName (n) == (
	  		name := n;
	  	);
	  	
	 -- returns the talk's description
	 public GetDescription : () ==> Utils`String
	  	GetDescription () == (
	  		return description;
	  	);
	  	
	 -- set the talk description
	 public SetDescription : Utils`String ==> ()
	  	SetDescription (d) == (
	  		description := d;
	  	);
	  	
	 -- returns the talk's date
	 pure public GetDate : () ==> Utils`Date
	  	GetDate () == (
	  		return date;
	  	);
	  	
	 -- set the talk date
	 public SetDate : Utils`Date ==> ()
	  	SetDate (d) == (
	  		date := d;
	  	);
	  	
	 -- returns the talk's time
	 pure public GetTime : () ==> Utils`Time
	  	GetTime () == (
	  		return time;
	  	);
	  	
	 -- set the talk time
	 public SetTime : Utils`Time ==> ()
	  	SetTime (t) == (
	  		time := t;
	  	);
	  	
	 -- returns the talk's duration
	 pure public GetDuration : () ==> nat1
	  	GetDuration () == (
	  		return duration;
	  	);
	  	
	 -- set the talk duration
	 public SetDuration : nat1 ==> ()
	  	SetDuration (d) == (
	  		duration := d;
	  	);
	  	
	  -- returns the talk's conference
	 pure public GetConference : () ==> Utils`String
	  	GetConference () == (
	  		return conference;
	  	);
	  	
	 -- set the conference conference
	 public SetConference : Utils`String ==> ()
	  	SetConference (c) == (
	  		conference := c;
	  	);
	  	
	  -- returns the talk's speakers
	 public GetSpeakers : () ==> set of Influential
	  	GetSpeakers () == (
	  		return speakers;
	  	);
	  	
	  -- returns the talk's attendees
	 public GetAttendees : () ==> set of Attendee
	  	GetAttendees () == (
	  		return attendees;
	  	);
	  	
	 -- adds a new speaker to the talk
   public AddSpeaker : Influential ==> ()
	  	AddSpeaker (speaker) == (
	  		speakers := speakers union {speaker};
	  	)	
	  	pre speaker not in set speakers
			post speakers = speakers~ union {speaker};
			
	 -- removes a speaker from the talk
   public RemoveSpeaker : Influential ==> ()
	  	RemoveSpeaker (speaker) == (
	  		speakers := speakers \ {speaker};
	  	)	
	  	pre speaker in set speakers
			post speakers = speakers~ \ {speaker};
	  	
	 -- adds a new attendee to the talk
	 public AddAttendee : Attendee ==> ()
	  	AddAttendee (attendee) == (
	  		attendees := attendees union {attendee};
	  	)	
	  	pre attendee not in set attendees
			post attendees = attendees~ union {attendee};
			
	-- returns the total of attendees		
	public GetTotalAttendees: () ==> int
		GetTotalAttendees() == (
			return card attendees;
		);
	 
functions

traces

end Talk