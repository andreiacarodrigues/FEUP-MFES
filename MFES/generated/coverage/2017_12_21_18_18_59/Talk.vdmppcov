class Talk
types

values

instance variables

	private name : Utils`String := [];
	private description : Utils`String := [];
	private date : Utils`Date;
	private time : Utils`Time;
	private duration : nat1;
	private speakers : set of Influential := {};
	private attendees : set of Attendee := {};
	
operations

	-- constructor of the talk class 
		public Talk :  Utils`String *  Utils`String *  Utils`Date *  Utils`Time * nat1 ==> Talk
	  	Talk (talkName, talkDescription, talkDate, talkTime, talkDuration) == (
	  		name := talkName;
	  		description := talkDescription;
	  		date := talkDate;
	  		time := talkTime;
	  		duration := talkDuration;
	  		return self
	  	)
	  	pre len talkName > 0 and len talkDescription > 0 
	  		and talkDate.year > 0 and talkDate.month > 0 and talkDate.day > 0 and talkDate.month <= 12 
	  		and talkDate.day <= Utils`DaysOfMonth(talkDate.year,talkDate.month) and talkTime.hour >= 0
	  		and talkTime.hour < 24 and talkTime.minute >=0 and talkTime.minute < 60 and talkDuration > 0;
	  	
	 -- returns the talk's name
	 public GetName : () ==> Utils`String
	  	GetName () == (
	  		return name;
	  	);
	  	
	 -- returns the talk's description
	 public GetDescription : () ==> Utils`String
	  	GetDescription () == (
	  		return description;
	  	);
	  	
	 -- returns the talk's date
	 pure public GetDate : () ==> Utils`Date
	  	GetDate () == (
	  		return date;
	  	);
	  	
	 -- returns the talk's time
	 pure public GetTime : () ==> Utils`Time
	  	GetTime () == (
	  		return time;
	  	);
	  	
	 -- returns the talk's duration
	 public GetDuration : () ==> nat1
	  	GetDuration () == (
	  		return duration;
	  	);
	  	
	  -- returns the talk's speakers
	 public GetSpeakers : () ==> set of Influential
	  	GetSpeakers () == (
	  		return speakers;
	  	);
	 
	  -- returns the talk's attendees
	 public GetAttendees : () ==> set of Attendee
	  	GetAttendees () == (
	  		return attendees;
	  	);
	  	
	 -- adds a new speaker to the talk
   public AddSpeaker : Influential ==> ()
	  	AddSpeaker (speaker) == (
	  		speakers := speakers union {speaker};
	  	)	
	  	pre speaker not in set speakers
			post speakers = speakers~ union {speaker};
	  	
	 -- adds a new attendee to the talk
	 public AddAttendee : Attendee ==> ()
	  	AddAttendee (attendee) == (
	  		attendees := attendees union {attendee};
	  	)	
	  	pre attendee not in set attendees
			post attendees = attendees~ union {attendee};
	  	
	  	

  -- prints the talk information
	  public Print : () ==> ()
	  	Print() == (
	  		IO`print("Name: "); IO`print(self.GetName());
	  		IO`print("\n");
	  		IO`print("Description: "); IO`print(self.GetDescription());
	  		IO`print("\n");
	  		IO`print("Date: "); IO`print(self.GetDate().year); IO`print("-"); 
	  		IO`print(self.GetDate().month); IO`print("-"); IO`print(self.GetDate().day);
	  		IO`print("\n");
	  		IO`print("Time: ");IO`print(self.GetTime().hour); IO`print(":"); IO`print(self.GetTime().minute);
	  		IO`print("\n");
	  		IO`print("Duration: "); IO`print(self.GetDuration()); IO`print(" minutes");
	  		IO`print("\n");
	  		IO`print("Speakers: "); IO`print(self.GetSpeakers());
	  		IO`print("\n");
	  		IO`print("Attendees: "); IO`print(self.GetAttendees());
	  	);
	  	
	 
functions

traces

end Talk