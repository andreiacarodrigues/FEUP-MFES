class Conference
types
	
values

instance variables

	private name : Utils`String := [];
	private description : Utils`String := [];
	private talks : set of Talk := {};
	private companies : set of Company := {};
	
operations
		
	  -- constructor of the conference class 
		public Conference : Utils`String * Utils`String ==> Conference
	  	Conference (conferenceName, conferenceDescription) == (
	  		name := conferenceName;
	  		description := conferenceDescription;
	  		return self
	  	)
	  	pre len conferenceName > 0 and len conferenceDescription > 0;
	  	
	 -- returns the conference name
	 pure public GetName : () ==> Utils`String
	  	GetName () == (
	  		return name;
	  	);
	  	
	 -- returns the conference description
	 pure public GetDescription : () ==> Utils`String
	  	GetDescription () == (
	  		return description;
	  	);
	  	
	 -- returns the conference talks
	 pure public GetTalks : () ==> set of Talk
	  	GetTalks () == (
	  		return talks;
	  	);
	  	
	  -- returns a conference talk by it's name
	 public GetTalk : Utils`String ==> set of Talk
	  	GetTalk (talkName) == (
	  		dcl result: set of Talk := {};
	  		
	  		for all talk in set talks do (
	  			if talk.GetName() = talkName
	  			then result := result union {talk};
	  		);
	  		
	  		return result
	  	)
	  	pre len talkName > 0
			post RESULT = {} or card RESULT = 1;
			
	-- returns a conference talk by it's time
	pure public GetTalk : Utils`Time ==> set of Talk
	  	GetTalk (talkTime) == (
	  		dcl result: set of Talk := {};
	  		
	  		for all talk in set talks do (
	  			if talk.GetTime() = talkTime
	  			then result := result union {talk};
	  		);
	  		
	  		return result
	  	)
	  	pre talkTime.hour >= 0 and talkTime.hour < 24 and talkTime.minute >= 0 and talkTime.minute < 60
			post RESULT = {} or card RESULT = 1;
	  	
	 
	  -- returns the conference attending companies
	 pure public GetCompanies : () ==> set of Company
	  	GetCompanies () == (
	  		return companies;
	  	);
	  	
	 -- adds a new talk to the conference
	 public AddTalk : Talk ==> ()
	  	AddTalk (talk) == (
	  		talks := talks union {talk};
	  	)
	  	pre talk not in set talks
			post talks = talks~ union {talk};
			
	 -- remove Talk
	 public RemoveTalk : Talk ==> ()
	  	RemoveTalk (talk) == (
	  		talks := talks \ {talk};
	  	)
	  	pre talk in set talks and card talks >= 1
			post talks = talks~ \ {talk};
	  	
	-- adds a new company attending the conference
  public AddCompany : Company ==> ()
	  	AddCompany (company) == (
	  		companies := companies union {company};
	  	)
	  	pre company not in set companies
			post companies = companies~ union {company};
			
	-- remove company attending
	public RemoveCompany : Company ==> ()
	  	RemoveCompany (company) == (
	  		companies := companies \ {company};
	  	)
	  	pre company in set companies and card companies >= 1
			post companies = companies~ \ {company};
			
	 -- returns talks of the day, sorted by time
	pure public GetTalks : Utils`Date ==> set of Talk
	  	GetTalks (date) == (
	  		dcl result: set of Talk := {};
	    	dcl timesSeq: seq of Utils`Time := [];
	    	dcl timesTotal : nat1;
	  	
	  		for all talk in set talks do (
	  		if(talk.GetDate() = date)
	  			then timesSeq := timesSeq ^ [talk.GetTime()];
	  		);
	
	  		timesSeq := Utils`mergesort(timesSeq);
	  		timesTotal := 1;
	  		
	  		while (timesTotal < len timesSeq)
	  		do
	  			result := result union GetTalk(timesSeq(timesTotal-1));
	  	
	  		-- TODO
	  		return result
	  	);
	 
functions

traces

end Conference