class WebSummitTest is subclass of MyTestCase
types

values

instance variables

	date1 : Utils`Date := mk_Utils`Date(2017,9,1);
	date2 : Utils`Date := mk_Utils`Date(2017,9,3);
	
	time1 : Utils`Time := mk_Utils`Time(15,20);
	time2 : Utils`Time := mk_Utils`Time(15,40);
	time3 : Utils`Time := mk_Utils`Time(16,40);
	time4 : Utils`Time := mk_Utils`Time(15,30);
	
	--C1
	--D1
	talk1 : Talk := new Talk("Talk 1", "Talk 1 description", date1, time2, 40);
	talk2 : Talk := new Talk("Talk 2", "Talk 2 description", date1, time1, 20); 
	talk3 : Talk := new Talk("Talk 3", "Talk 3 description", date1, time3, 20);
	--D2
	talk4 : Talk := new Talk("Talk 4", "Talk 4 description", date2, time3, 20);
	
	--C2
	--D1
	talk5 : Talk := new Talk("Talk 5", "Talk 5 description", date1, time4, 20);
	--D2
	talk6 : Talk := new Talk("Talk 6", "Talk 6 description", date2, time2, 60);
	talk7 : Talk := new Talk("Talk 7", "Talk 7 description", date2, time3, 20);
	talk8 : Talk := new Talk("Talk 8", "Talk 8 description", date2, time1, 20);
	
	conference1 : Conference := new Conference("Conference 1", "Conference 1 details");
	conference2 : Conference := new Conference("Conference 2", "Conference 2 details");
	conference3 : Conference := new Conference("Conference 1", "Conference 3 details");
	
operations
public static main: () ==> ()
	main() ==
	(
		dcl webSummitTest: WebSummitTest := new WebSummitTest();
		
		IO`print("testCreateAndAddConference -> ");
		webSummitTest.testCreateAndAddConference();
		IO`println("Success");
		
		IO`print("testCreateAndAddTalk -> ");
		webSummitTest.testCreateAndAddTalk();
		IO`println("Success");
		
		IO`print("testSchedules -> ");
		webSummitTest.testSchedules();
		IO`println("Success");
	);
	
	-- test if the creation of conferences is working correctly
	private testCreateAndAddConference: () ==> ()
	testCreateAndAddConference() == (
		dcl webSummit: WebSummit := WebSummit`ClearInstance();
		dcl c1 : Conference := new Conference("C1", "D1");
		-- for tests supposed to fail
		/*dcl c2 : Conference := new Conference("Conference 1", "Conference 2 details");*/
		webSummit.SetDates(date1, date2);
		AddConference(c1);
		assertEqual("C1", c1.GetName());
		assertEqual("D1", c1.GetDescription());
		assertEqual({}, c1.GetTalks());
		assertEqual({}, c1.GetCompanies());
		
		c1.SetName("Conference 1");
		assertEqual("Conference 1", c1.GetName());
		
		c1.SetDescription("Conference 1 details");
		assertEqual("Conference 1 details", c1.GetDescription());
		
		assertEqual(1, card webSummit.GetConferences());
		assertEqual({c1}, webSummit.GetConferences());
		
		-- this test is supposed to fail (there can't be two conferences with the same name)
		/*AddConference(c2);*/
		
		-- this test is supposed to fail (can't create conferences with empty name)
		/*c1 := new Conference("", "Conference 3 details");*/
	);
	
	-- test if the creation of talks is working correctly
	private testCreateAndAddTalk: () ==> ()
	testCreateAndAddTalk() == (
		dcl webSummit: WebSummit := WebSummit`ClearInstance();
		dcl c : Conference := new Conference("Conference 1", "Conference 1 details");
		dcl t1 : Talk := new Talk("T1", "D1", date2, time2, 30);
		-- for tests supposed to fail
		/*dcl t2 : Talk := new Talk("Talk 2", "Talk 2 description", date1, time2, 40);
		dcl t3 : Talk := new Talk("Talk 3", "Talk 3 description", mk_Utils`Date(2017,8,30), time2, 40);
		dcl t4 : Talk := new Talk("Talk 1", "Talk 4 description", date1, time2, 40);*/
		
		webSummit.SetDates(date1, date2);
		AddConference(c);
		
		assertEqual("T1", t1.GetName());
		assertEqual("D1", t1.GetDescription());
		assertEqual(date2, t1.GetDate());
		assertEqual(time2, t1.GetTime());
		assertEqual(30, t1.GetDuration());
		assertEqual("", t1.GetConference());
		assertEqual({}, t1.GetSpeakers());
		assertEqual({}, t1.GetAttendees());
		
		t1.SetName("Talk 1");
		assertEqual("Talk 1", t1.GetName());
		
		t1.SetDescription("Talk 1 description");
		assertEqual("Talk 1 description", t1.GetDescription());
		
		t1.SetDate(date1);
		assertEqual(date1, t1.GetDate());
		
		t1.SetTime(time1);
		assertEqual(time1, t1.GetTime());
		
		t1.SetDuration(40);
		assertEqual(40, t1.GetDuration());
		
		AddTalk(c,t1);
		
		assertEqual(c.GetName(), t1.GetConference());
		
		assertEqual(1, card c.GetTalks());
		assertEqual({t1}, c.GetTalks());
		
		-- this test is supposed to fail (can't add a talk that overlaps an already existing one)
		/*AddTalk(c,t2);*/
		
		-- this test is supposed to fail (can't add a talk with a date before/after the dates when websummit happens)
		/*AddTalk(c,t3);*/
		
		-- this test is supposed to fail (there can't be two talks with the same name)
		/*AddTalk(c,t4);*/
		
		-- this test is supposed to fail (can't create talks with empty name)
		/*t2 := new Talk("", "Talk 2 description", date1, time2, 40);*/
	);
	
	
	-- test if the construction of the schedules is working correctly
	private testSchedules: () ==> ()
	testSchedules() == (
		dcl webSummit: WebSummit := WebSummit`ClearInstance();
		webSummit.SetDates(date1, date2);
		
		AddConference(conference1);
		AddConference(conference2);
		
		AddTalk(conference1, talk1);
		AddTalk(conference1, talk2);
		AddTalk(conference1, talk3);
		AddTalk(conference1, talk4);
		
		AddTalk(conference2, talk5);
		AddTalk(conference2, talk6);
		AddTalk(conference2, talk7);
		AddTalk(conference2, talk8);
		
		assertEqual(2, card webSummit.GetConferences());
		assertEqual({conference1, conference2}, webSummit.GetConferences());
		
		assertEqual(4, card conference1.GetTalks());
		assertEqual({talk1, talk2, talk3, talk4}, conference1.GetTalks());
		
		assertEqual(4, card conference2.GetTalks());
		assertEqual({talk5, talk6, talk7, talk8}, conference2.GetTalks());
		
		assertEqual(3, len webSummit.GetSchedule(conference1, date1));
		assertEqual([talk2, talk1, talk3],  webSummit.GetSchedule(conference1, date1));
		
		assertEqual(1, len webSummit.GetSchedule(conference1, date2));
		assertEqual([talk4],  webSummit.GetSchedule(conference1, date2));
		
		assertEqual(1, len webSummit.GetSchedule(conference2, date1));
		assertEqual([talk5],  webSummit.GetSchedule(conference2, date1));
		
		assertEqual(3, len webSummit.GetSchedule(conference2, date2));
		assertEqual([talk8, talk6, talk7],  webSummit.GetSchedule(conference2, date2));
		
		assertEqual(3, card dom webSummit.GetSchedule(conference1));
		assertEqual({date1|->[talk2, talk1, talk3], Utils`nextDay(date1)|->[], date2|->[talk4]}, webSummit.GetSchedule(conference1));
		
		assertEqual(3, card dom webSummit.GetSchedule(conference2));
		assertEqual({date1|->[talk5], Utils`nextDay(date1)|->[], date2|->[talk8, talk6, talk7]}, webSummit.GetSchedule(conference2));
		
		assertEqual(3, card dom webSummit.GetSchedule());
		assertEqual({date1|->[talk2, talk5, talk1, talk3], Utils`nextDay(date1)|->[], date2|->[talk8, talk6, talk7, talk4]}, webSummit.GetSchedule());
		
		-- this test is supposed to fail (2 first talks badly sorted, talk 2 takes place before talk5)
		/*assertEqual({date1|->[talk5, talk2, talk1, talk3], Utils`nextDay(date1)|->[], date2|->[talk8, talk6, talk7, talk4]}, webSummit.GetSchedule());
		*/
	);
	
	private AddConference: Conference ==> ()
	AddConference(c) ==	(
		WebSummit`GetInstance().AddConference(c);
	);
	
	private AddTalk: Conference * Talk ==> ()
	AddTalk(c, t) ==	(
		WebSummit`GetInstance().AddTalk(c, t);
	);
	
	private AddCompany: Conference * Company ==> ()
	AddCompany(conf, c) ==	(
		WebSummit`GetInstance().AddCompany(conf, c);
	);
	
	
	/* 
	TODO:
		Conference:
			- testAddCompany
			- testRemoveTalk
			- testRemoveCompany
			
		Talk:
			- add attendee
			- remove attendee
			- add speaker
			- remove speaker
	*/
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end WebSummitTest