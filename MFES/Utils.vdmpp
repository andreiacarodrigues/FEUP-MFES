class Utils
types

	public String = seq of char;
	public Date :: year : nat1
								 month: nat1
							   day : nat1
			inv d == d.month >= 1 and d.month <= 12 and d.day >= 1 and d.day <= DaysOfMonth(d.year,d.month);
			
	public Time :: hour : nat1
								 minute: nat1
			inv t == t.hour < 24 and t.minute < 60;
			

			
values

instance variables

	public static id : nat1 := 1;

operations
	
functions

	public IsLeapYear: nat1 +> bool IsLeapYear(year) == year mod 4 = 0 and year mod 100 <> 0 or year mod 400 = 0;
	public DaysOfMonth: nat1 * nat1 -> nat1 DaysOfMonth(year, month) == ( cases month : 1, 3, 5, 7, 8, 10, 12 -> 31, 4, 6, 9, 11 -> 30, 2 -> if IsLeapYear(year) then 29 else 28 end ) pre month >= 1 and month <= 12;

	public lmerge : seq of Time * seq of Time -> seq of Time
			lmerge (s1,s2) ==
			(if s1 = []
			then s2
			elseif (s2 = [])
			then s1
			elseif 
			isBefore(hd s1, hd s2)
			then [hd s1] ^ (lmerge (tl s1, s2))
			else [hd s2] ^ (lmerge (s1, tl s2)));
			
	public mergesort : seq of Time -> seq of Time
			mergesort (l) == (
			cases l:
			[] -> [],
			[x] -> [x],
			l1 ^ l2 -> lmerge (mergesort(l1), mergesort(l2))
			end
		);
	
	public isBefore: Time * Time -> bool
		isBefore(time1, time2) ==
		(
			if (time1.hour < time2.hour)
			then true
			elseif(time1.hour = time2.hour)
			then if(time1.minute < time2.minute)
					then true
					else false
			else false
		
		);
		
		public nextDay: Date -> Date
		nextDay(d) ==
		(
			if (d.day = DaysOfMonth(d.year,d.month))
			then if(d.month < 12)
					 then mk_Date(d.year, d.month + 1, 1)
					 else
					 mk_Date(d.year + 1, 1, 1)
		  else
		  mk_Date(d.year, d.month, d.day + 1)
		);
			
			
	public DoesntOverlap: Time * nat1 * Time * nat1 -> bool
		DoesntOverlap(time1, dur1, time2, dur2) ==
		(
			if (time1.hour < time2.hour)
			then if (time1.minute + dur1 < 60)
					then true
					else if(time1.minute + dur1 - 60 < time2.minute)
							 then true
							 else false
	
			elseif  (time1.hour = time2.hour)
			then if(time1.minute < time2.minute)
					 then if(time1.minute + dur1 <= time2.minute)
					 			then true
					 			else false
					 elseif(time2.minute < time1.minute)
					 then if(time2.minute + dur2 <= time1.minute)
					 			then true
					 			else false
					 	else false
					 	
			elseif (time2.hour < time1.hour)
			then if (time2.minute + dur2 < 60)
					then true
					else if(time2.minute + dur2 - 60 < time1.minute)
							 then true
							 else false
			else false
		);
		
traces

end Utils